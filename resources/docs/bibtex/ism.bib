@inproceedings{10.1145/3519941.3535065,
author = {Liu, Fengyun and Prokopec, Aleksandar},
title = {Implicit State Machines},
year = {2022},
isbn = {9781450392662},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3519941.3535065},
doi = {10.1145/3519941.3535065},
abstract = {Finite-state machines (FSM) are a simple yet powerful abstraction widely used for modeling, programming and verifying real-time and reactive systems that control modern factories, power plants, transportation systems and medical equipment. However, traditionally finite-state machines are either encoded indirectly in an imperative language, such as C and Verilog, or embedded as an imperative extension of a declarative language, such as Lustre. Given the widely accepted advantage of declarative programming, can we have a declarative design of finite-state machines to facilitate design, construction, and verification of embedded programs? By sticking to the design principle of declarativeness, we show that a novel abstraction emerges, implicit state machines, which is declarative in nature and at the same time supports recursive composition. Given its simplicity and universality, we believe it may serve as a new foundation for programming embedded systems.},
booktitle = {Proceedings of the 23rd ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, and Tools for Embedded Systems},
pages = {13â€“25},
numpages = {13},
keywords = {hierarchical finite-state machines, implicit state machines, Finite-state machines},
location = {San Diego, CA, USA},
series = {LCTES 2022}
}
